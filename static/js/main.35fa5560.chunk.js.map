{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TODO_URL","App","useState","newTodo","setNewTodo","updateTodo","setUpdateTodo","todos","setTodos","onNewTodoChange","useCallback","event","target","value","formSubmited","preventDefault","trim","requestOptions","method","headers","body","JSON","stringify","content","fetch","then","response","json","result","id","done","addTodo","todo","index","newTodos","slice","splice","updateTodoContent","update","onUpdateTodo","e","removeTodo","filter","otherTodo","useEffect","res","error","onSubmit","htmlFor","type","autoFocus","onChange","map","key","checked","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.35fa5560.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useCallback, useEffect } from 'react';\n\nconst TODO_URL = 'http://ec2-54-90-206-133.compute-1.amazonaws.com:8000/api/todos/'\n\nconst App = () => {\n  const [newTodo, setNewTodo] = useState('');\n  const [updateTodo, setUpdateTodo] = useState('');\n  const [todos, setTodos] = useState([]);\n  const onNewTodoChange = useCallback((event) => {\n    setNewTodo(event.target.value)\n  }, []);\n  const formSubmited = useCallback((event) => {\n    event.preventDefault();\n    if (!newTodo.trim()) return;\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ content: newTodo })\n    };\n\n    fetch(TODO_URL, requestOptions)\n        .then(response => response.json())\n        .then((result) => {\n          setTodos([\n            ...todos,\n            {\n              id: result.id,\n              content: result.content,\n              done: result.done,\n            },\n          ]);\n        });\n    setNewTodo(''); // restart input field\n  }, [newTodo, todos]);\n\n  const addTodo = useCallback((todo, index) => (event) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ done: !todo.done, content: todo.content })\n    };\n\n    fetch(`${TODO_URL}${todo.id}/`, requestOptions)\n        .then(response => response.json())\n        .then((result) => {\n          const newTodos = todos.slice();\n          newTodos.splice(index, 1, {\n            ...todo,\n            done: result.done,\n            content: result.content\n          });\n          setTodos(newTodos)\n        });\n    setUpdateTodo('')\n  }, [todos])\n\n  const updateTodoContent = useCallback((todo, index, update) => (event) => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ done: todo.done, content: update })\n    };\n\n    fetch(`${TODO_URL}${todo.id}/`, requestOptions)\n        .then(response => response.json())\n        .then((result) => {\n          const newTodos = todos.slice();\n          newTodos.splice(index, 1, {\n            ...todo,\n            done: result.done,\n            content: result.content\n          });\n          setTodos(newTodos)\n        });\n  }, [todos])\n\n  const onUpdateTodo = (e) => {\n    setUpdateTodo(e.target.value)\n  }\n\n  const removeTodo = useCallback((todo) => (event) => {    \n    const requestOptions = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' }\n    }\n    fetch(`${TODO_URL}${todo.id}/`, requestOptions)\n        .then(response => {\n          setTodos(todos.filter(otherTodo => otherTodo !== todo));\n        })\n    \n  }, [todos])\n\n\n  const fetchTodos = () => {\n    fetch(TODO_URL).then(res => res.json())\n      .then((result) => {\n        setTodos(result)        \n      }, (error) => {})\n  }\n\n  useEffect(() => {\n    fetchTodos()\n  }, [newTodo]);\n  return (\n    <div>\n      <form onSubmit={formSubmited}>\n        <label htmlFor=\"newTodo\">Enter a To-Do:</label>\n        <input\n          id=\"newTodo\"\n          type=\"text\"\n          value={newTodo}\n          autoFocus\n          onChange={onNewTodoChange} />\n        <button>Add Todo</button>\n      </form>\n      {/* <button onClick={markAllDone}>Mark all done</button> */}\n      <ul>\n        {todos.map((todo, index) => {\n          return <li key={todo.id}>\n            <input\n              value={todo.done}\n              type=\"checkbox\"\n              checked={todo.done}\n              onChange={addTodo(todo, index)}\n            />\n            <span className={todo.done ? 'done' : ''}>{todo.content}</span>\n            <input className={todo.done ? 'done' : ''} onChange={onUpdateTodo} value={updateTodo}/>\n            <button onClick={removeTodo(todo)}>Remove Todo</button>\n            <button onClick={updateTodoContent(todo, index, updateTodo)}>Update Todo</button>\n          </li>\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}